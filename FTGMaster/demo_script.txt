//本文件是FTGMaster定义Macro的脚本语言讲解。

//请使用UTF-8或Unicode编码保存脚本文件。Ansi编码保存的脚本文件解析东亚文字会产生乱码。

//和大多数语言一样，两个slash后面至换行符前面是注释部分。FTGMaster并不支持其他的注释方式。

//定义Macro的运算符有: ( ) , | & ; > end 共9个。和大部分语言一样，运算符只支持半角英文字符。请不要把全角标点当做运算符。

//除了MacroName外，所有代码均大小写不敏感。声明按下按键可以随你喜欢写Press、press或PRESS。

//每个脚本文件称为一个MacroProfile，每个MacroProfile中可以包含多个Macro定义。

//支持的按键与对应的字符串在本脚本最后




//1.以下是基本的Macro定义举例
:Basic_Macro_Demo(press g)  	//首先以:开始定义一个Macro，后面紧接着的Basic_Macro_Demo是本Macro的Name。
			    	//然后()圆括号里声明本Macro的触发条件：按下G键触发。
			    	//触发条件声明会在下一个Macro详细讲解

		            	//右圆括号)后面是Macro Body
			    	//Macro体只支持三种动作的模拟：press（按下）；wait（等待）；lift（弹起）
			    	//动作后面空一个空格，后面写按键对应的字符串，或者等待时间（毫秒）
	press a;            	//Macro触发时，首先程序会模拟A键按下
	wait 15;	    	//然后程序会等待15秒
	lift a;		    	//然后程序会模拟a键弹起
end				//end表示macro定义结束



//2.以下是自定义触发条件举例
//FTGMaster支持多种多样的触发条件，这对于格斗类游戏Macro定义尤为有效，可以完成各种神级操作
:Trigger_Condition_Demo(  		//首先以:开始定义一个Macro，后面紧接的Trigger_Condition_Demo是本Macro的Name
	press h,			//首先定义触发Macro的按键动作。支持press（按下）和lift（弹起）。
					//动作后面一个空格，后面写按键对应的字符串
	modifier control&alt,		//定义modifier。当control和alt均为按下状态时按g此Macro才会被触发。
	prefer a>d,			//定义prefer选项。a>d表示只有之前a键晚于d键被按下，此Macro才会被触发。时间以按键按下时间为准。
					//prefer选项主要用于格斗类游戏为Macro选择方向时使用
	after j 2000|k 2000|l 2000,	//定义after选项，以j、k、l三个键中在时间范围内的最晚按下的为准
	block				//声明block，则原按键事件会被屏蔽（g被按下会被屏蔽）
)					//右圆括号)表示触发条件声明完成。后面是Macro Body
	press a;            		//Macro触发时，首先程序会模拟A键按下
	wait 15;	    		//然后程序会等待15秒
	lift a;		    		//然后程序会模拟a键弹起
end					//end表示macro定义结束


//3.以下是支持的按键字符串
//escape表示Escape按键，Macro Body内写press escape;就可以模拟Escape按键按下
//1代表主键盘区数字1
//2代表主键盘区数字2，等等还有很多。。。
//有的按键会与多个字符串匹配。比如退格键，写back和backspace都可以
//全部支持的按键请看下面代码
            //switch (lowerCaseStringToParse)
            //{
            //    case "escape":
            //        value = DirectXKeyCode.Escape;
            //        break;
            //    case "1":
            //        value = DirectXKeyCode.D1;
            //        break;
            //    case "2":
            //        value = DirectXKeyCode.D2;
            //        break;
            //    case "3":
            //        value = DirectXKeyCode.D3;
            //        break;
            //    case "4":
            //        value = DirectXKeyCode.D4;
            //        break;
            //    case "5":
            //        value = DirectXKeyCode.D5;
            //        break;
            //    case "6":
            //        value = DirectXKeyCode.D6;
            //        break;
            //    case "7":
            //        value = DirectXKeyCode.D7;
            //        break;
            //    case "8":
            //        value = DirectXKeyCode.D8;
            //        break;
            //    case "9":
            //        value = DirectXKeyCode.D9;
            //        break;
            //    case "0":
            //        value = DirectXKeyCode.D0;
            //        break;
            //    case "-":
            //        value = DirectXKeyCode.Minus;
            //        break;
            //    case "=":
            //        value = DirectXKeyCode.Equals;
            //        break;
            //    case "backspace":
            //    case "back":
            //        value = DirectXKeyCode.BackSpace;
            //        break;
            //    case "tab":
            //        value = DirectXKeyCode.Tab;
            //        break;
            //    case "q":
            //        value = DirectXKeyCode.Q;
            //        break;
            //    case "w":
            //        value = DirectXKeyCode.W;
            //        break;
            //    case "e":
            //        value = DirectXKeyCode.E;
            //        break;
            //    case "r":
            //        value = DirectXKeyCode.R;
            //        break;
            //    case "t":
            //        value = DirectXKeyCode.T;
            //        break;
            //    case "y":
            //        value = DirectXKeyCode.Y;
            //        break;
            //    case "u":
            //        value = DirectXKeyCode.U;
            //        break;
            //    case "i":
            //        value = DirectXKeyCode.I;
            //        break;
            //    case "o":
            //        value = DirectXKeyCode.O;
            //        break;
            //    case "p":
            //        value = DirectXKeyCode.P;
            //        break;
            //    case "{":
            //    case "[":
            //        value = DirectXKeyCode.LeftBracket;
            //        break;
            //    case "}":
            //    case "]":
            //        value = DirectXKeyCode.RightBracket;
            //        break;
            //    case "return":
            //    case "enter":
            //        value = DirectXKeyCode.Return;
            //        break;
            //    case "leftcontrol":
            //    case "lcontrol":
            //    case "lctrl":
            //    case "controlkey":
            //    case "lcontrolkey":
            //        value = DirectXKeyCode.LeftControl;
            //        break;
            //    case "a":
            //        value = DirectXKeyCode.A;
            //        break;
            //    case "s":
            //        value = DirectXKeyCode.S;
            //        break;
            //    case "d":
            //        value = DirectXKeyCode.D;
            //        break;
            //    case "f":
            //        value = DirectXKeyCode.F;
            //        break;
            //    case "g":
            //        value = DirectXKeyCode.G;
            //        break;
            //    case "h":
            //        value = DirectXKeyCode.H;
            //        break;
            //    case "j":
            //        value = DirectXKeyCode.J;
            //        break;
            //    case "k":
            //        value = DirectXKeyCode.K;
            //        break;
            //    case "l":
            //        value = DirectXKeyCode.L;
            //        break;
            //    case ";":
            //    case "semicolon":
            //        value = DirectXKeyCode.SemiColon;
            //        break;
            //    case "'":
            //    case "apostrophe":
            //        value = DirectXKeyCode.Apostrophe;
            //        break;
            //    case "`":
            //    case "grave":
            //        value = DirectXKeyCode.Grave;
            //        break;
            //    case "leftshift":
            //    case "lshift":
            //    case "shiftkey":
            //    case "lshiftkey":
            //        value = DirectXKeyCode.LeftShift;
            //        break;
            //    case "\\":
            //    case "backslash"://反斜杠\
            //        value = DirectXKeyCode.BackSlash;
            //        break;
            //    case "z":
            //        value = DirectXKeyCode.Z;
            //        break;
            //    case "x":
            //        value = DirectXKeyCode.X;
            //        break;
            //    case "c":
            //        value = DirectXKeyCode.C;
            //        break;
            //    case "v":
            //        value = DirectXKeyCode.V;
            //        break;
            //    case "b":
            //        value = DirectXKeyCode.B;
            //        break;
            //    case "n":
            //        value = DirectXKeyCode.N;
            //        break;
            //    case "m":
            //        value = DirectXKeyCode.M;
            //        break;
            //    case ",":
            //    case "comma":
            //        value = DirectXKeyCode.Comma;
            //        break;
            //    case ".":
            //    case "period":
            //        value = DirectXKeyCode.Period;
            //        break;
            //    case "/":
            //    case "slash":
            //        value = DirectXKeyCode.Slash;
            //        break;
            //    case "rightshift":
            //    case "rshift":
            //    case "rshiftkey":
            //        value = DirectXKeyCode.RightShift;
            //        break;
            //    case "*":
            //    case "numpadstar":
            //    case "multiply":
            //        value = DirectXKeyCode.NumPadStar;
            //        break;
            //    case "leftmenu":
            //    case "lmenu":
            //    case "leftalt":
            //    case "lalt":
            //    case "altkey":
            //        value = DirectXKeyCode.LeftAlt;
            //        break;
            //    case "space":
            //        value = DirectXKeyCode.Space;
            //        break;
            //    case "capital":
            //    case "capsLock":
            //        value = DirectXKeyCode.CapsLock;
            //        break;
            //    case "f1":
            //        value = DirectXKeyCode.F1;
            //        break;
            //    case "f2":
            //        value = DirectXKeyCode.F2;
            //        break;
            //    case "f3":
            //        value = DirectXKeyCode.F3;
            //        break;
            //    case "f4":
            //        value = DirectXKeyCode.F4;
            //        break;
            //    case "f5":
            //        value = DirectXKeyCode.F5;
            //        break;
            //    case "f6":
            //        value = DirectXKeyCode.F6;
            //        break;
            //    case "f7":
            //        value = DirectXKeyCode.F7;
            //        break;
            //    case "f8":
            //        value = DirectXKeyCode.F8;
            //        break;
            //    case "f9":
            //        value = DirectXKeyCode.F9;
            //        break;
            //    case "f10":
            //        value = DirectXKeyCode.F10;
            //        break;
            //    case "numlock":
            //        value = DirectXKeyCode.Numlock;
            //        break;
            //    case "scroll":
            //    case "scrolllock":
            //        value = DirectXKeyCode.Scroll;
            //        break;
            //    case "numpad7":
            //        value = DirectXKeyCode.NumPad7;
            //        break;
            //    case "numpad8":
            //        value = DirectXKeyCode.NumPad8;
            //        break;
            //    case "numpad9":
            //        value = DirectXKeyCode.NumPad9;
            //        break;
            //    case "numpad-":
            //    case "numpadminus":
            //    case "subtract":
            //        value = DirectXKeyCode.NumPadMinus;
            //        break;
            //    case "numpad4":
            //        value = DirectXKeyCode.NumPad4;
            //        break;
            //    case "numpad5":
            //        value = DirectXKeyCode.NumPad5;
            //        break;
            //    case "numpad6":
            //        value = DirectXKeyCode.NumPad6;
            //        break;
            //    case "numpadplus":
            //    case "numpad+":
            //    case "add":
            //        value = DirectXKeyCode.NumPadPlus;
            //        break;
            //    case "numpad1":
            //        value = DirectXKeyCode.NumPad1;
            //        break;
            //    case "numpad2":
            //        value = DirectXKeyCode.NumPad2;
            //        break;
            //    case "numpasd3":
            //        value = DirectXKeyCode.NumPad3;
            //        break;
            //    case "numpad0":
            //        value = DirectXKeyCode.NumPad0;
            //        break;
            //    case "numpad.":
            //    case "numpadperiod":
            //    case "decimal":
            //        value = DirectXKeyCode.NumPadPeriod;
            //        break;
            //    case "oem102":
            //        value = DirectXKeyCode.OEM102;
            //        break;
            //    case "f11":
            //        value = DirectXKeyCode.F11;
            //        break;
            //    case "f12":
            //        value = DirectXKeyCode.F12;
            //        break;
            //    case "f13":
            //        value = DirectXKeyCode.F13;
            //        break;
            //    case "f14":
            //        value = DirectXKeyCode.F14;
            //        break;
            //    case "f15":
            //        value = DirectXKeyCode.F15;
            //        break;
            //    case "kana":
            //    case "kanamode":
            //        value = DirectXKeyCode.Kana;
            //        break;
            //    case "abntc1":
            //        value = DirectXKeyCode.AbntC1;
            //        break;
            //    case "convert":
            //    case "imeconvert"://IME convert key
            //        value = DirectXKeyCode.Convert;
            //        break;
            //    case "noconvert":
            //    case "imenoconvert": //IME no convert keyDirectXKeyCode
            //        value = DirectXKeyCode.NoConvert;
            //        break;
            //    case "yen":
            //        value = DirectXKeyCode.Yen;
            //        break;
            //    case "abntc2":
            //        value = DirectXKeyCode.AbntC2;
            //        break;
            //    case "numpadequals":
            //    case "numpad=":
            //        value = DirectXKeyCode.NumPadEquals;
            //        break;
            //    case "circumflex":
            //    case "prevtrack":
            //    case "previoustrack":
            //    case "mediaprevioustrack":
            //        value = DirectXKeyCode.Circumflex;
            //        break;
            //    case "at":
            //    case "@":
            //        value = DirectXKeyCode.At;
            //        break;
            //    case "colon":
            //        value = DirectXKeyCode.Colon;
            //        break;
            //    case "underline":
            //    case "_":
            //        value = DirectXKeyCode.Underline;
            //        break;
            //    case "kanji":
            //    case "kanjimode":
            //        value = DirectXKeyCode.Kanji;
            //        break;
            //    case "stop":
            //        value = DirectXKeyCode.Stop;
            //        break;
            //    case "ax":
            //        value = DirectXKeyCode.AX;
            //        break;
            //    case "unlabeled":
            //        value = DirectXKeyCode.Unlabeled;
            //        break;
            //    case "nexttrack":
            //    case "medianexttrack":
            //        value = DirectXKeyCode.NextTrack;
            //        break;
            //    case "numpadenter":
            //        value = DirectXKeyCode.NumPadEnter;
            //        break;
            //    case "rightcontrol":
            //    case "rcontrol":
            //    case "rightctrl":
            //    case "rctrl":
            //    case "rcontrolkey":
            //        value = DirectXKeyCode.RightControl;
            //        break;
            //    case "mute":
            //    case "volumemute":
            //        value = DirectXKeyCode.Mute;
            //        break;
            //    case "calculator":
            //        value = DirectXKeyCode.Calculator;
            //        break;
            //    case "playpause":
            //        value = DirectXKeyCode.PlayPause;
            //        break;
            //    case "mediastop":
            //        value = DirectXKeyCode.MediaStop;
            //        break;
            //    case "volumedown":
            //        value = DirectXKeyCode.VolumeDown;
            //        break;
            //    case "volumeup":
            //        value = DirectXKeyCode.VolumeUp;
            //        break;
            //    case "webhome":
            //        value = DirectXKeyCode.WebHome;
            //        break;
            //    case "numpadcomma":
            //    case "numpad,":
            //        value = DirectXKeyCode.NumPadComma;
            //        break;
            //    case "divide":
            //        value = DirectXKeyCode.Divide;
            //        break;
            //    case "sysrq":
            //        value = DirectXKeyCode.SysRq;
            //        break;
            //    case "rightmenu":
            //    case "rmenu":
            //    case "rightalt":
            //    case "ralt":
            //        value = DirectXKeyCode.RightAlt;
            //        break;
            //    case "pause":
            //        value = DirectXKeyCode.Pause;
            //        break;
            //    case "home":
            //        value = DirectXKeyCode.Home;
            //        break;
            //    case "uparrow":
            //    case "up":
            //        value = DirectXKeyCode.UpArrow;
            //        break;
            //    case "prior":
            //    case "pageup":
            //        value = DirectXKeyCode.PageUp;
            //        break;
            //    case "left":
            //    case "leftarrow":
            //        value = DirectXKeyCode.LeftArrow;
            //        break;
            //    case "right":
            //    case "rightarrow":
            //        value = DirectXKeyCode.RightArrow;
            //        break;
            //    case "end":
            //        value = DirectXKeyCode.End;
            //        break;
            //    case "down":
            //    case "downarrow":
            //        value = DirectXKeyCode.DownArrow;
            //        break;
            //    case "next":
            //    case "pagedown":
            //        value = DirectXKeyCode.Next;
            //        break;
            //    case "insert":
            //        value = DirectXKeyCode.Insert;
            //        break;
            //    case "delete":
            //        value = DirectXKeyCode.Delete;
            //        break;
            //    case "leftwindows":
            //    case "lwindows":
            //        value = DirectXKeyCode.LeftWindows;
            //        break;
            //    case "rightwindows":
            //    case "rwindows":
            //        value = DirectXKeyCode.RightWindows;
            //        break;
            //    case "apps":
            //    case "application":
            //    case "app":
            //        value = DirectXKeyCode.Apps;
            //        break;
            //    case "power":
            //        value = DirectXKeyCode.Power;
            //        break;
            //    case "sleep":
            //        value = DirectXKeyCode.Sleep;
            //        break;
            //    case "wake":
            //        value = DirectXKeyCode.Wake;
            //        break;
            //    case "websearch":
            //    case "browsersearch":
            //        value = DirectXKeyCode.WebSearch;
            //        break;
            //    case "webfavorites":
            //    case "webfav":
            //    case "browserfavorites":
            //    case "browserfav":
            //        value = DirectXKeyCode.WebFavorites;
            //        break;
            //    case "webrefresh":
            //    case "browserrefresh":
            //        value = DirectXKeyCode.WebRefresh;
            //        break;
            //    case "webstop":
            //    case "browserstop":
            //        value = DirectXKeyCode.WebStop;
            //        break;
            //    case "webforward":
            //    case "browserforward":
            //        value = DirectXKeyCode.WebForward;
            //        break;
            //    case "webback":
            //    case "browserback":
            //        value = DirectXKeyCode.WebBack;
            //        break;
            //    case "mycomputer":
            //        value = DirectXKeyCode.MyComputer;
            //        break;
            //    case "mail":
            //        value = DirectXKeyCode.Mail;
            //        break;
            //    case "mediaselect":
            //        value = DirectXKeyCode.MediaSelect;
            //        break;
            //    default:
            //        value = DirectXKeyCode.None;
            //        break;
            //}